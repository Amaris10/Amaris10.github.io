<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript学习</title>
    <link href="/2023/09/22/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/09/22/JavaScript%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="手写JavaScript代码"><a href="#手写JavaScript代码" class="headerlink" title="手写JavaScript代码"></a>手写JavaScript代码</h1><h2 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPromise</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-variable constant_">PENDING</span> = <span class="hljs-string">&#x27;pending&#x27;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-variable constant_">FULFILLED</span> = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-variable constant_">REJECTED</span> = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">func</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> = myPromise.<span class="hljs-property">PENDING</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledCallbacks</span> = [];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span> = [];<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title function_">func</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">resolve</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">reject</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reject</span>(error)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-params">result</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === myPromise.<span class="hljs-property">PENDING</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> = myPromise.<span class="hljs-property">FULFILLED</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span> = result;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callback</span> =&gt;</span> &#123;<br>                    <span class="hljs-title function_">callback</span>(result)<br>                &#125;)<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">reject</span>(<span class="hljs-params">reason</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === myPromise.<span class="hljs-property">PENDING</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> = myPromise.<span class="hljs-property">REJECTED</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span> = reason;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callback</span> =&gt;</span> &#123;<br>                    <span class="hljs-title function_">callback</span>(reason)<br>                &#125;)<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * [注册fulfilled状态/rejected状态对应的回调函数] </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">function</span>&#125; onFulfilled  fulfilled状态时 执行的函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">function</span>&#125; onRejected  rejected状态时 执行的函数 </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">function</span>&#125; newPromsie  返回一个新的promise对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>) &#123;<br>        onFulfilled = <span class="hljs-keyword">typeof</span> onFulfilled === <span class="hljs-string">&#x27;function&#x27;</span> ? onFulfilled : <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value;<br>        onRejected = <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span> ? onRejected : <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">throw</span> reason;<br>        &#125;;<br><br>        <span class="hljs-keyword">let</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">myPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === myPromise.<span class="hljs-property">FULFILLED</span>) &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span>);<br>                        <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        <span class="hljs-title function_">reject</span>(e);<br>                    &#125;<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === myPromise.<span class="hljs-property">REJECTED</span>) &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span>);<br>                        <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        <span class="hljs-title function_">reject</span>(e)<br>                    &#125;<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === myPromise.<span class="hljs-property">PENDING</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span>);<br>                            <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject)<br>                        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                            <span class="hljs-title function_">reject</span>(e);<br>                        &#125;<br>                    &#125;);<br>                &#125;);<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span>);<br>                            <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>                        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                            <span class="hljs-title function_">reject</span>(e);<br>                        &#125;<br>                    &#125;);<br>                &#125;);<br>            &#125;<br>        &#125;)<br><br>        <span class="hljs-keyword">return</span> promise2<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Promise.resolve()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">[type]</span>&#125; value 要解析为 Promise 对象的值 </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-comment">// 如果这个值是一个 promise ，那么将返回这个 promise </span><br>        <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> myPromise) &#123;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> &amp;&amp; <span class="hljs-string">&#x27;then&#x27;</span> <span class="hljs-keyword">in</span> value) &#123;<br>            <span class="hljs-comment">// 如果这个值是thenable（即带有`&quot;then&quot; `方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态；</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">myPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>                value.<span class="hljs-title function_">then</span>(resolve, reject);<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-comment">// 否则返回的promise将以此值完成，即以此值执行`resolve()`方法 (状态为fulfilled)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">myPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">resolve</span>(value)<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Promise.reject()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; reason 表示Promise被拒绝的原因</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns</span> </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">reject</span>(<span class="hljs-params">reason</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">myPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">reject</span>(reason);<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Promise.prototype.catch()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; onRejected </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns</span> </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">catch</span> (onRejected) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(<span class="hljs-literal">undefined</span>, onRejected)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Promise.prototype.finally()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; callBack 无论结果是fulfilled或者是rejected，都会执行的回调函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns</span> </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">finally</span>(<span class="hljs-params">callBack</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(callBack, callBack)<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2023/07/05/html%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/07/05/html%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>复习常见标签，了解H5新特性（canvas，存储，websocket）<br>了解shadowDOM、webComponent，跟着教程写一个webComponent</p><h2 id="H5新特性🥝"><a href="#H5新特性🥝" class="headerlink" title="H5新特性🥝"></a>H5新特性🥝</h2><p>语义化标签：HTML5引入了一系列的语义化标签（如&lt;header&gt;、&lt;nav&gt;、&lt;section&gt;、&lt;article&gt;、&lt;aside&gt;、&lt;footer&gt;等），使开发者能够更清晰地定义文档结构，提高可读性和可维护性。</p><p>视频和音频支持：HTML5的&lt;video&gt;和&lt;audio&gt;标签使得在网页中嵌入和播放视频和音频变得更加简单。同时，还包括了一些JavaScript API用于控制媒体的播放和交互。</p><p>Canvas绘图：通过HTML5的&lt;canvas&gt;标签，开发者可以使用JavaScript绘制复杂的图形、动画和游戏。Canvas提供了2D和3D绘图的能力，使得在网页中创建交互和有趣的图形变得更容易。</p><p>本地存储：HTML5引入了本地存储能力，包括localStorage和sessionStorage API，使得网页可以在浏览器本地存储数据，提供更好的离线访问和持久化存储的能力。</p><p>表单增强：HTML5增加了一些新的表单元素和属性，如&lt;input type&#x3D;”date”&gt;、&lt;input type&#x3D;”email”&gt;、&lt;input type&#x3D;”url”&gt;等，使得在网页中处理表单更方便，并提供了一些验证和限制选项，减少了对JavaScript的依赖。</p><p>地理位置API：HTML5的地理位置API可以获取用户的地理位置信息，使得网页能够根据用户位置提供个性化的服务和内容。</p><p>拖放功能：HTML5引入了新的拖放API，使得开发者可以更方便地实现拖拽和拖放的功能。通过拖放API，网页元素可以被拖动、放置和重新排序。</p><p>WebSocket：HTML5中引入了WebSocket协议，提供了一种全双工、长连接的通信方式，使得网页可以实时地与服务器进行双向通信。</p><h2 id="SEO🍆"><a href="#SEO🍆" class="headerlink" title="SEO🍆"></a>SEO🍆</h2><p>SEO（Search Engine Optimization，搜索引擎优化）是一种通过优化网站内容、结构和技术，以增加网站在搜索引擎中的可见性和排名的方法。以下是一些常用的SEO搜索优化策略和技巧：</p><ol><li><p>关键词优化：研究和确定适合你网站的关键词，并在网站的标题、元描述、标签、内容和URL中合理地使用这些关键词。</p></li><li><p>内容质量和相关性：创建高质量、有价值、原创和相关的内容，满足用户搜索需求。确保内容易于阅读、结构清晰，并使用标题和子标题来组织内容。</p></li><li><p>网站结构优化：优化网站的结构和导航，使搜索引擎能够轻松读取和索引网站的页面。使用XML网站地图来帮助搜索引擎了解你的网站结构。</p></li><li><p>友好的URL结构：使用简洁、描述性和易于理解的URL，包含相关关键词。</p></li><li><p>页面加载速度优化：确保你的网站加载速度快，以提供更好的用户体验。优化图像大小、减少HTTP请求数、使用缓存和压缩技术等，以减少页面加载时间。</p></li><li><p>移动友好性：确保你的网站在移动设备上具有良好的用户体验，并且响应式设计以适应不同的屏幕尺寸。</p></li><li><p>外部链接和内部链接优化：建立高质量的外部链接，以增加你的网站在搜索引擎中的权威性和可信度。同时，在你的网站内部使用内部链接来引导搜索引擎爬虫和用户浏览不同页面之间的关联性。</p></li><li><p>社交媒体整合：将你的网站和内容与社交媒体平台整合，以增加曝光和分享，增加你的品牌知名度，并提高你的网站在搜索引擎中的可见性。</p></li><li><p>网站安全和HTTPS：确保你的网站使用HTTPS协议来提供安全的访问，搜索引擎对安全网站的排名更加青睐。</p></li><li><p>监测和分析：使用工具（如Google Analytics）来监测和分析你的网站的流量、关键词排名和用户行为数据，以便优化你的SEO策略。</p></li></ol><h2 id="Web-Component-🌽"><a href="#Web-Component-🌽" class="headerlink" title="Web Component 🌽"></a>Web Component 🌽</h2><p>Web组件（Web Components）是一组技术，用于创建可重用的自定义HTML元素和组件，使得开发者能够以更模块化、可复用的方式构建和组合Web界面。<br>Web组件由三个主要技术组成：</p><ol><li>Custom Elements（自定义元素）：允许开发者创建自定义的HTML元素，可以使用自定义的标签名来定义新的元素，并通过JavaScript和CSS来定义元素的行为和样式。</li><li>Shadow DOM（影子DOM）：允许开发者创建独立的DOM子树，用于封装元素的结构和样式，使得内部的DOM结构和样式不受外部的影响。</li><li>HTML Templates（HTML模板）：允许开发者创建可复用的HTML模板，使得一段预定义的HTML结构可以被多次使用，并在需要的时候进行实例化。<br>使用Web组件的好处包括：</li><li>可重用性：开发者可以创建和使用自定义元素和组件，使得代码可以被多次使用和共享。</li><li>封装性：使用Shadow DOM可以将元素的内部实现和样式封装起来，避免与其他模块或全局样式发生冲突。</li><li>组件化：通过组合不同的自定义元素和组件，可以构建更复杂的Web应用界面。</li><li>扩展性：可以通过自定义元素和组件的扩展来实现对新功能的支持和更新。<br>Web组件的概念和技术在现代Web开发中得到了广泛的应用和支持，可以和其他前端框架（如React、Angular、Vue.js）配合使用，或单独使用。它提供了一种更模块化、可组合的方式来构建Web界面，有助于提高开发效率和代码质量。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>张吱吱的Bolg</title>
    <link href="/2023/07/02/hello-world/"/>
    <url>/2023/07/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
